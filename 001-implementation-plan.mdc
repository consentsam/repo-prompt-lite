---
description: 
globs: 
alwaysApply: false
---
# Implementation Plan  <!-- EDIT IN PLACE -->

## 0 Project Bootstrap
- [x] **Step 0.1 – Scaffold Electron + React + TS workspace**  
  - **Task**: Initialise with Electron 30, Vite, React 18, TypeScript, Tailwind (dark-mode only); add ESLint, Prettier & Husky.  
  - **Files**: `package.json`, `electron.vite.config.ts`, `src/main/main.ts`, …  
  - **Dependencies**: —  
  - **Status**: ✅ done  
  - **Notes**: Scaffolded initial workspace with Electron 30, React 18, TypeScript, and Tailwind; resolved module issues by switching to CJS configs; implemented minimal preload script.

## 1 Folder Import & IPC
- [x] **Step 1.1 – Folder-choose / drag-drop**  
  - **Task**: `FolderPicker.tsx` UI; `ipcRenderer.invoke('pick')`; HTML5 drag-drop.  
  - **Dependencies**: 0.1  
  - **Status**: ✅ done  
  - **Notes**: Created FolderPicker component with button and drag-drop functionality; implemented secure IPC communication for folder selection; added error handling and user feedback.

- [x] **Step 1.2 – Directory walk (main-process)**  
  - **Task**: Async recursive walker; stream progress; skip binaries; return rough token estimate per file.  
  - **Dependencies**: 1.1  
  - **Status**: ✅ done  
  - **Notes**: Implemented async directory walker with binary detection, file size limits, progress streaming, and token estimation; created DirectoryScanner UI component for real-time feedback.

## 2 Tree Rendering
- [x] **Step 2.1 – Virtualised file-tree**  
  - **Task**: `@tanstack/react-virtual`; collapsible rows; Tailwind dark styling.  
  - **Dependencies**: 1.2  
  - **Status**: ✅ done  
  - **Notes**: Implemented virtualized file tree with @tanstack/react-virtual; added collapsible rows with double-click support; improved UI with grid layout and Tailwind styling; added Expand/Collapse All buttons. _(Bug fix applied for row click interaction for expand/collapse)._

- [x] **Step 2.2 – Tri-state checkbox cascade**  
  - **Task**: Reducer with `immer`; propagate checked / partial state.  
  - **Dependencies**: 2.1  
  - **Status**: ✅ done  
  - **Notes**: Enhanced selection reducer with multiple actions using immer; implemented tri-state checkboxes with cascading behavior; added bulk selection features and accessibility improvements including keyboard navigation. _(Bug fix applied for row click interaction for file selection and related refactoring in `FileTree.tsx`)._

## 3 Copy Payload Generation
- [x] **Step 3.1 – Flatten selection**  
  - **Task**: `getSelectedFiles()` util.  
  - **Dependencies**: 2.2  
  - **Status**: ✅ done  
  - **Notes**: Enhanced selection utilities with comprehensive flattening and analysis functions; created a detailed selection statistics component with file type breakdown; improved UI flow with toggle controls for different views.
- [x] **Step 3.2 – Build `<file_map>`**  
  - **Task**: ASCII tree formatter.  
  - **Dependencies**: 3.1  
  - **Status**: ✅ done  
  - **Notes**: Revamped the tree formatter with extensive customization options; created an interactive FileMap preview component; implemented file size and token calculation for directories; added options for sorting, filtering, and depth control.
- [ ] **Step 3.3 – Stream contents & clipboard write**  
  - **Task**: Read selected files (UTF-8), enforce 2 M-token cap, write payload to clipboard.  
  - **Dependencies**: 3.2  
  - **Status**: ✅ done  
  - **Notes**: Implemented IPC to read selected files in main process, construct payload with `<file_path>` and `<file_contents>` tags, enforce 2M token cap (warning at 1.8M), and write to clipboard. Renderer calls IPC and displays status.

## 4 Edge-cases & Performance
- [ ] **Step 4.1 – Binary / ≥ 1 MB filter** • Dependencies: 3.3  
- [ ] **Step 4.2 – Lazy child loading** • Dependencies: 4.1  
- [ ] **Step 4.3 – Live token counter in UI** • Dependencies: 4.2  

## 5 UI Polish
- [ ] **Step 5.1 – Toolbar hotkeys & collapse-all** • Dependencies: 4.3  

## 6 Testing & QA
- [ ] **Step 6.1 – Unit tests** • Dependencies: 5.1  
- [ ] **Step 6.2 – Component tests** • Dependencies: 6.1  
- [ ] **Step 6.3 – E2E Playwright tests** • Dependencies: 6.2  

## 7 Packaging & Docs
- [ ] **Step 7.1 – macOS `.dmg` build** • Dependencies: 6.3  
- [ ] **Step 7.2 – README & CHANGELOG** • Dependencies: 7.1
